# {{ entity.name }}

## Description

{{ entity.description|md_line_breaks }}

{% if entity.annotations %}
## Arguments

| Name | Type | Description |
| - | - | - |
{%- for annotation in entity.annotations %}
| `{{ annotation.python_name }}` | `#!python3 {{ annotation.python_type }}` | {% if not annotation.required %}Optional. {% endif %}{{ annotation.description|first_line }} |
{%- endfor %}
{% endif %}


## Response

Type: `#!python3 {{ entity.python_returning_type }}`

Description: {{ entity.returning }}


## Usage


### As bot method bot

```python3
result: {{ entity.python_returning_type }} = await bot.{{ entity.pythonic_name }}(...)
```

### Method as object

Imports:

- `from aiogram.types import {{ entity.name|class_name }}`
- `from aiogram.api.types import {{ entity.name|class_name }}`
- `from aiogram.api.types.{{ entity.pythonic_name }} import {{ entity.name|class_name }}`

{% if entity.can_be_used_in_webhook -%}
#### As reply into Webhook
```python3
return {{ entity.name|class_name }}(...)
```
{% endif %}
#### With specific bot
```python3
result: {{ entity.python_returning_type }} = await bot.emit({{ entity.name|class_name }}(...))
```

#### In handlers with current bot
```python3
result: {{ entity.python_returning_type }} = await {{ entity.name|class_name }}(...)
```


## Related pages:

- [Official documentation](https://core.telegram.org/bots/api#{{ entity.anchor }})
{% for import in imports.telegram %}- [aiogram.types.{{ import }}](../types/{{ import|pythonize }}.md)
{% endfor %}
