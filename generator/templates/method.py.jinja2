from __future__ import annotations
from pydantic import Field
from .base import TelegramMethod, Request, Response, prepare_input_media, prepare_media_file, prepare_parse_mode, prepare_file
from ..types import UNSET

{% if imports %}
{%- if imports.extra %}{% for import in imports.extra %}{{ import }}
{% endfor %}{% endif %}
{% if imports.typing %}from typing import {{ imports.typing|join(', ') }}{% endif %}
{% if imports.telegram %}
{% for import in imports.telegram %}from ..types import {{ import }}
{% endfor %}
{%- endif %}
{%- endif %}
if TYPE_CHECKING:  # pragma: no cover
    from ..client.bot import Bot

class {{ entity.name|class_name }}(TelegramMethod[{{ entity.python_returning_type }}]):
    """
    {{ entity.description|limit_length(width=95)|indent(width=4) }}

    Source: https://core.telegram.org/bots/api#{{ entity.anchor }}
    """
    __returning__ = {{ entity.python_returning_type }}

{% for annotation in entity.annotations %}
    {{ annotation.python_field }}
    """{{ annotation.description|first_line|limit_length(width=92)|indent(width=4) }}"""
{%- endfor %}
    def build_request(self, bot: Bot) -> Request:
        data: Dict[str, Any] = self.dict({% if entity.file_annotations %}exclude={ {% for annotation in entity.file_annotations %}"{{ annotation.python_name }}"{% if not loop.last %}, {% endif %}{% endfor %} }{% endif %})
        {% set parse_mode_property, entities_property = entity.parse_mode_annotations %}
        {% if parse_mode_property %}
        prepare_parse_mode(bot, data, parse_mode_property='{{ parse_mode_property }}', entities_property='{{ entities_property }}')
        {% endif %}
{#        {% for annotation in entity.annotations %}{% if annotation.name == 'parse_mode' %}#}
{#            prepare_parse_mode(bot, data)#}
{#        {% elif annotation.name == 'explanation_parse_mode' %}#}
{#            prepare_parse_mode(bot, data, parse_mode_property="explanation_parse_mode")#}
{#        {% endif %}{% endfor %}#}

        {% if entity.file_annotations %}files: Dict[str, InputFile] = {}{% endif %}
        {%- for file in entity.file_annotations %}
        prepare_file(data=data, files=files, name="{{ file.name }}", value=self.{{ file.python_name }})
        {%- endfor %}

        return Request(method="{{ entity.name }}", data=data{% if entity.file_annotations %}, files=files{% endif %})

